Object subclass: #RaylibApp	instanceVariableNames: 'ray'	classVariableNames: ''	poolDictionaries: ''	category: 'Raylib'!!RaylibApp methodsFor: 'as yet unclassified' stamp: 'tmj 8/23/2023 20:38'!initialize	"starts the app"	| delta |	ray := RaylibInterface new.	ray initWindow: self windowWidth h: self windowHeight n: self windowTitle.	[		[ray windowShouldClose] whileFalse: [			delta := ray getFrameTime.			self process: delta.			ray beginDrawing.			self render: delta.			ray endDrawing.		].		ray closeWindow.	] forkAt: Processor userBackgroundPriority.! !!RaylibApp methodsFor: 'as yet unclassified' stamp: 'tmj 8/23/2023 20:41'!process: delta	"for app logic"! !!RaylibApp methodsFor: 'as yet unclassified' stamp: 'tmj 8/23/2023 20:41'!render: delta	"for drawing code"! !!RaylibApp methodsFor: 'as yet unclassified' stamp: 'tmj 8/23/2023 20:13'!windowHeight	^100! !!RaylibApp methodsFor: 'as yet unclassified' stamp: 'tmj 8/23/2023 20:15'!windowTitle	^'Title'! !!RaylibApp methodsFor: 'as yet unclassified' stamp: 'tmj 8/23/2023 20:12'!windowWidth	^200! !ExternalStructure subclass: #RaylibCamera2D	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Raylib'!!RaylibCamera2D methodsFor: '*autogenerated - accessing'!offset	<generated>	^ RaylibVector2		fromHandle: (handle structAt: 1 length: 8)! !!RaylibCamera2D methodsFor: '*autogenerated - accessing'!offset: t1 	<generated>	handle		structAt: 1		put: t1 getHandle		length: 8! !!RaylibCamera2D methodsFor: '*autogenerated - accessing'!rotation	<generated>	^ handle floatAtByteOffset: 17! !!RaylibCamera2D methodsFor: '*autogenerated - accessing'!rotation: t1 	<generated>	handle floatAtByteOffset: 17 put: t1! !!RaylibCamera2D methodsFor: '*autogenerated - accessing'!target	<generated>	^ RaylibVector2		fromHandle: (handle structAt: 9 length: 8)! !!RaylibCamera2D methodsFor: '*autogenerated - accessing'!target: t1 	<generated>	handle		structAt: 9		put: t1 getHandle		length: 8! !!RaylibCamera2D methodsFor: '*autogenerated - accessing'!zoom	<generated>	^ handle floatAtByteOffset: 21! !!RaylibCamera2D methodsFor: '*autogenerated - accessing'!zoom: t1 	<generated>	handle floatAtByteOffset: 21 put: t1! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RaylibCamera2D class	instanceVariableNames: ''!!RaylibCamera2D class methodsFor: '*autogenerated - external type'!externalType	<generated>	^ ExternalType_RaylibCamera2D! !!RaylibCamera2D class methodsFor: 'as yet unclassified' stamp: 'tmj 8/26/2023 22:34'!fields	^#(		(offset 'RaylibVector2')		(target 'RaylibVector2')		(rotation 'float')		(zoom 'float')	)! !ExternalStructure subclass: #RaylibColor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Raylib'!!RaylibColor methodsFor: '*autogenerated - accessing'!alpha	<generated>	^ (handle uint8At: 4) asCharacter! !!RaylibColor methodsFor: '*autogenerated - accessing'!alpha: t1 	<generated>	handle uint8At: 4 put: t1 asInteger! !!RaylibColor methodsFor: '*autogenerated - accessing'!blue	<generated>	^ (handle uint8At: 3) asCharacter! !!RaylibColor methodsFor: '*autogenerated - accessing'!blue: t1 	<generated>	handle uint8At: 3 put: t1 asInteger! !!RaylibColor methodsFor: '*autogenerated - accessing'!green	<generated>	^ (handle uint8At: 2) asCharacter! !!RaylibColor methodsFor: '*autogenerated - accessing'!green: t1 	<generated>	handle uint8At: 2 put: t1 asInteger! !!RaylibColor methodsFor: '*autogenerated - accessing'!red	<generated>	^ (handle uint8At: 1) asCharacter! !!RaylibColor methodsFor: '*autogenerated - accessing'!red: t1 	<generated>	handle uint8At: 1 put: t1 asInteger! !!RaylibColor methodsFor: 'as yet unclassified' stamp: 'tmj 8/23/2023 08:31'!red: r green: g blue: b alpha: a	"set colors & alpha all at once"	self red: r.	self green: g.	self blue: b.	self alpha: a.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RaylibColor class	instanceVariableNames: ''!!RaylibColor class methodsFor: '*autogenerated - external type'!externalType	<generated>	^ ExternalType_RaylibColor! !!RaylibColor class methodsFor: 'as yet unclassified' stamp: 'tmj 8/22/2023 22:43'!fields	^#(		(red 'char')		(green 'char')		(blue 'char')		(alpha 'char')	)! !Object subclass: #RaylibInterface	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Raylib'!!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/22/2023 05:12'!beginDrawing	"set up the canvas to start drawing"	<cdecl: void 'BeginDrawing' (void) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/27/2023 06:58'!beginMode2D: camera	"begin 2D mode with camera"	<cdecl: void 'BeginMode2D' (RaylibCamera2D) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/23/2023 06:59'!clearBackground: color	"clears the background to a specific color"	<cdecl: void 'ClearBackground' (RaylibColor) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/19/2023 23:16'!closeWindow	"closes the window"	<cdecl: void 'CloseWindow' (void) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/23/2023 07:20'!drawText: text x: posX y: posY fs: fontSize c: textColor	"draws text on screen; this function has low customization but is simple to use"	<cdecl: void 'DrawText' (const char* long long long RaylibColor) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/24/2023 21:28'!drawTexture: texture x: posX y: posY c: color	"draws a given texture"	<cdecl: void 'DrawTexture' (RaylibTexture2D, long, long, RaylibColor) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/28/2023 05:05'!drawTextureEx: texture p: position r: rotation s: scale c: color	"draws a given texture with extended parameters"	<cdecl: void 'DrawTextureEx' (RaylibTexture2D, RaylibVector2, float, float, RaylibColor) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/28/2023 05:05'!drawTexturePro: texture f: from t: to o: origin r: rotation c: color	"draws a given texture with even more parameters"	<cdecl: void 'DrawTexturePro' (RaylibTexture2D, RaylibRectangle, RaylibRectangle, RaylibVector2, float, RaylibColor) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/28/2023 05:05'!drawTextureRec: texture f: from p: position c: color	"draws part of a given texture defined by a rectangle"	<cdecl: void 'DrawTextureRec' (RaylibTexture2D, RaylibRectangle, RaylibVector2, RaylibColor) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/28/2023 05:06'!drawTextureV: texture p: position c: color	"draws a given texture, using a vector"	<cdecl: void 'DrawTextureV' (RaylibTexture2D, RaylibVector2, RaylibColor) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/22/2023 05:13'!endDrawing	"stop canvas drawing"	<cdecl: void 'EndDrawing' (void) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/26/2023 22:39'!endMode2D	"stops 2D mode"	<cdecl: void 'EndMode2D' (void) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/25/2023 08:17'!fileExists: filename	""	<cdecl: bool 'FileExists' (const char*) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/23/2023 12:45'!getFrameTime	"returns the time (in seconds) elapsed since the last frame"	<cdecl: float 'GetFrameTime' (void) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/21/2023 20:42'!initWindow: width h: height n: name	"creates the window"	<cdecl: void 'InitWindow' (long, long, const char*) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/24/2023 05:06'!isKeyDown: key	"true if key is held down"	<cdecl: bool 'IsKeyDown' (long) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/24/2023 05:05'!isKeyPressed: key	"true if key pressed once"	<cdecl: bool 'IsKeyPressed' (long) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/24/2023 05:07'!isKeyReleased: key	"true if key was released once"	<cdecl: bool 'IsKeyReleased:' (long) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/24/2023 05:09'!isKeyUp: key	"true if key is up"	<cdecl: bool 'IsKeyUp' (long) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/24/2023 20:34'!loadTexture: filename	"returns a texture of given filename if it exists"	<cdecl: RaylibTexture2D 'LoadTexture' (const char*) module: 'libraylib.so'>	^ self externalCallFailed! !!RaylibInterface methodsFor: 'as yet unclassified' stamp: 'tmj 8/21/2023 20:42'!windowShouldClose	"returns true if escape key is pressed or user tries to close the window"	<cdecl: bool 'WindowShouldClose' (void) module: 'libraylib.so'>	^ self externalCallFailed! !ExternalStructure subclass: #RaylibRectangle	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Raylib'!!RaylibRectangle methodsFor: '*autogenerated - accessing'!height	<generated>	^ handle floatAtByteOffset: 13! !!RaylibRectangle methodsFor: '*autogenerated - accessing'!height: t1 	<generated>	handle floatAtByteOffset: 13 put: t1! !!RaylibRectangle methodsFor: '*autogenerated - accessing'!width	<generated>	^ handle floatAtByteOffset: 9! !!RaylibRectangle methodsFor: '*autogenerated - accessing'!width: t1 	<generated>	handle floatAtByteOffset: 9 put: t1! !!RaylibRectangle methodsFor: '*autogenerated - accessing'!x	<generated>	^ handle floatAtByteOffset: 1! !!RaylibRectangle methodsFor: '*autogenerated - accessing'!x: t1 	<generated>	handle floatAtByteOffset: 1 put: t1! !!RaylibRectangle methodsFor: '*autogenerated - accessing'!y	<generated>	^ handle floatAtByteOffset: 5! !!RaylibRectangle methodsFor: '*autogenerated - accessing'!y: t1 	<generated>	handle floatAtByteOffset: 5 put: t1! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RaylibRectangle class	instanceVariableNames: ''!!RaylibRectangle class methodsFor: '*autogenerated - external type'!externalType	<generated>	^ ExternalType_RaylibRectangle! !!RaylibRectangle class methodsFor: 'as yet unclassified' stamp: 'tmj 8/28/2023 04:59'!fields	^#(		(x 'float')		(y 'float')		(width 'float')		(height 'float')	)! !ExternalStructure subclass: #RaylibTexture2D	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Raylib'!!RaylibTexture2D methodsFor: '*autogenerated - accessing'!format	<generated>	^ handle int32At: 17! !!RaylibTexture2D methodsFor: '*autogenerated - accessing'!format: t1 	<generated>	handle int32At: 17 put: t1! !!RaylibTexture2D methodsFor: '*autogenerated - accessing'!height	<generated>	^ handle int32At: 9! !!RaylibTexture2D methodsFor: '*autogenerated - accessing'!height: t1 	<generated>	handle int32At: 9 put: t1! !!RaylibTexture2D methodsFor: '*autogenerated - accessing'!id	<generated>	^ handle uint32At: 1! !!RaylibTexture2D methodsFor: '*autogenerated - accessing'!id: t1 	<generated>	handle uint32At: 1 put: t1! !!RaylibTexture2D methodsFor: '*autogenerated - accessing'!mipmaps	<generated>	^ handle int32At: 13! !!RaylibTexture2D methodsFor: '*autogenerated - accessing'!mipmaps: t1 	<generated>	handle int32At: 13 put: t1! !!RaylibTexture2D methodsFor: '*autogenerated - accessing'!width	<generated>	^ handle int32At: 5! !!RaylibTexture2D methodsFor: '*autogenerated - accessing'!width: t1 	<generated>	handle int32At: 5 put: t1! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RaylibTexture2D class	instanceVariableNames: ''!!RaylibTexture2D class methodsFor: '*autogenerated - external type'!externalType	<generated>	^ ExternalType_RaylibTexture2D! !!RaylibTexture2D class methodsFor: 'as yet unclassified' stamp: 'tmj 8/25/2023 08:55'!fields	^#(		(id 'ulong')		(width 'long')		(height 'long')		(mipmaps 'long')		(format 'long')	)! !ExternalStructure subclass: #RaylibVector2	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Raylib'!!RaylibVector2 methodsFor: '*autogenerated - accessing'!x	<generated>	^ handle floatAtByteOffset: 1! !!RaylibVector2 methodsFor: '*autogenerated - accessing'!x: t1 	<generated>	handle floatAtByteOffset: 1 put: t1! !!RaylibVector2 methodsFor: '*autogenerated - accessing'!y	<generated>	^ handle floatAtByteOffset: 5! !!RaylibVector2 methodsFor: '*autogenerated - accessing'!y: t1 	<generated>	handle floatAtByteOffset: 5 put: t1! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RaylibVector2 class	instanceVariableNames: ''!!RaylibVector2 class methodsFor: '*autogenerated - external type'!externalType	<generated>	^ ExternalType_RaylibVector2! !!RaylibVector2 class methodsFor: 'as yet unclassified' stamp: 'tmj 8/26/2023 22:29'!fields	^#(		(x 'float')		(y 'float')	)! !RaylibCamera2D compileFields!RaylibColor compileFields!RaylibRectangle compileFields!RaylibTexture2D compileFields!RaylibVector2 compileFields!